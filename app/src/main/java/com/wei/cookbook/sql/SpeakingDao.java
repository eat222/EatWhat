package com.wei.cookbook.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wei.cookbook.model.StringConverter;
import java.util.List;

import com.wei.cookbook.model.Speaking;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEAKING".
*/
public class SpeakingDao extends AbstractDao<Speaking, Long> {

    public static final String TABLENAME = "SPEAKING";

    /**
     * Properties of entity Speaking.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Speaking = new Property(0, String.class, "speaking", false, "SPEAKING");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property MDate = new Property(2, java.util.Date.class, "mDate", false, "M_DATE");
        public final static Property Address = new Property(3, String.class, "Address", false, "ADDRESS");
        public final static Property Drawble = new Property(4, String.class, "drawble", false, "DRAWBLE");
    }

    private final StringConverter drawbleConverter = new StringConverter();

    public SpeakingDao(DaoConfig config) {
        super(config);
    }
    
    public SpeakingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEAKING\" (" + //
                "\"SPEAKING\" TEXT," + // 0: speaking
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: id
                "\"M_DATE\" INTEGER," + // 2: mDate
                "\"ADDRESS\" TEXT," + // 3: Address
                "\"DRAWBLE\" TEXT);"); // 4: drawble
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEAKING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Speaking entity) {
        stmt.clearBindings();
 
        String speaking = entity.getSpeaking();
        if (speaking != null) {
            stmt.bindString(1, speaking);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        java.util.Date mDate = entity.getMDate();
        if (mDate != null) {
            stmt.bindLong(3, mDate.getTime());
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(4, Address);
        }
 
        List drawble = entity.getDrawble();
        if (drawble != null) {
            stmt.bindString(5, drawbleConverter.convertToDatabaseValue(drawble));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Speaking entity) {
        stmt.clearBindings();
 
        String speaking = entity.getSpeaking();
        if (speaking != null) {
            stmt.bindString(1, speaking);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        java.util.Date mDate = entity.getMDate();
        if (mDate != null) {
            stmt.bindLong(3, mDate.getTime());
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(4, Address);
        }
 
        List drawble = entity.getDrawble();
        if (drawble != null) {
            stmt.bindString(5, drawbleConverter.convertToDatabaseValue(drawble));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public Speaking readEntity(Cursor cursor, int offset) {
        Speaking entity = new Speaking( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // speaking
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // mDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Address
            cursor.isNull(offset + 4) ? null : drawbleConverter.convertToEntityProperty(cursor.getString(offset + 4)) // drawble
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Speaking entity, int offset) {
        entity.setSpeaking(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDrawble(cursor.isNull(offset + 4) ? null : drawbleConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Speaking entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Speaking entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Speaking entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
